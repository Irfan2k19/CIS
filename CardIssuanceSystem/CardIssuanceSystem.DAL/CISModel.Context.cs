//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CardIssuanceSystem.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using System.Configuration;
    using System.Security.Cryptography;
    using System.Text;
    using System.Data.Entity.Core.EntityClient;

    public partial class SoneriCISEntities : DbContext
    {
        public static string GetConnectionString()
        {
            string myCon = "";
            //EntityConnectionStringBuilder csb = new EntityConnectionStringBuilder(ConfigurationManager.ConnectionStrings["SoneriCISEntities"].ConnectionString.ToString());
            ////csb.Password = Decrypt(csb.Password);
            //string myCs = csb.ToString();
            //return myCs;
            string[] Conn = ConfigurationManager.ConnectionStrings["SoneriCISEntities"].ToString().Split(';');
            string pwd = Conn[5].ToString().Replace("password=", "");
            myCon = Conn[0].ToString() + ";" + Conn[1].ToString() + ";" + Conn[2].ToString() + ";" + Conn[3].ToString() + ";" + Conn[4].ToString() + ";password=" + Decrypt(pwd) + ";" + Conn[6].ToString() + ";" + Conn[7].ToString();
            return myCon;
        }

        public static string Decrypt(string input)
        {
            byte[] inputArray = Convert.FromBase64String(input);
            TripleDESCryptoServiceProvider tripleDES = new TripleDESCryptoServiceProvider();
            tripleDES.Key = UTF8Encoding.UTF8.GetBytes("F-JaNdRgUkXp2s5v");
            tripleDES.Mode = CipherMode.ECB;
            tripleDES.Padding = PaddingMode.PKCS7;
            ICryptoTransform cTransform = tripleDES.CreateDecryptor();
            byte[] resultArray = cTransform.TransformFinalBlock(inputArray, 0, inputArray.Length);
            tripleDES.Clear();
            return UTF8Encoding.UTF8.GetString(resultArray);
        }
        public SoneriCISEntities()
            : base("name=SoneriCISEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tbl_Account_Types> tbl_Account_Types { get; set; }
        public virtual DbSet<tbl_Card_Charges> tbl_Card_Charges { get; set; }
        public virtual DbSet<tbl_Card_Charges_Recovery> tbl_Card_Charges_Recovery { get; set; }
        public virtual DbSet<tbl_Card_Types> tbl_Card_Types { get; set; }
        public virtual DbSet<tbl_Card_Upgrade_Types> tbl_Card_Upgrade_Types { get; set; }
        public virtual DbSet<tbl_Currency> tbl_Currency { get; set; }
        public virtual DbSet<tbl_Customer_Accounts> tbl_Customer_Accounts { get; set; }
        public virtual DbSet<tbl_Customer_Cards> tbl_Customer_Cards { get; set; }
        public virtual DbSet<tbl_File_Exports> tbl_File_Exports { get; set; }
        public virtual DbSet<tbl_File_Imports> tbl_File_Imports { get; set; }
        public virtual DbSet<tbl_File_Paths> tbl_File_Paths { get; set; }
        public virtual DbSet<tbl_IncomeAccounts> tbl_IncomeAccounts { get; set; }
        public virtual DbSet<tbl_OperatingInstructions> tbl_OperatingInstructions { get; set; }
        public virtual DbSet<tbl_Posting_Restrictions> tbl_Posting_Restrictions { get; set; }
        public virtual DbSet<tbl_Region> tbl_Region { get; set; }
        public virtual DbSet<tbl_Regional_Charges> tbl_Regional_Charges { get; set; }
        public virtual DbSet<tbl_Request_Customer_Accounts> tbl_Request_Customer_Accounts { get; set; }
        public virtual DbSet<tbl_Requests> tbl_Requests { get; set; }
        public virtual DbSet<tbl_Sector> tbl_Sector { get; set; }
        public virtual DbSet<tbl_transactions> tbl_transactions { get; set; }
        public virtual DbSet<tbl_User_Log> tbl_User_Log { get; set; }
        public virtual DbSet<tbl_Users> tbl_Users { get; set; }
        public virtual DbSet<tbl_Page> tbl_Page { get; set; }
        public virtual DbSet<tbl_Profile> tbl_Profile { get; set; }
        public virtual DbSet<tbl_Profile_Page> tbl_Profile_Page { get; set; }
        public virtual DbSet<tbl_Section> tbl_Section { get; set; }
        public virtual DbSet<tbl_System_Requests> tbl_System_Requests { get; set; }
        public virtual DbSet<tbl_User_Profile> tbl_User_Profile { get; set; }
        public virtual DbSet<tbl_Session_Timeout> tbl_Session_Timeout { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<sp_GetCardCharges_Result> sp_GetCardCharges(string accountCode, Nullable<int> cardTypeID, string regionCode, string frequency, Nullable<bool> isReplacement)
        {
            var accountCodeParameter = accountCode != null ?
                new ObjectParameter("AccountCode", accountCode) :
                new ObjectParameter("AccountCode", typeof(string));
    
            var cardTypeIDParameter = cardTypeID.HasValue ?
                new ObjectParameter("CardTypeID", cardTypeID) :
                new ObjectParameter("CardTypeID", typeof(int));
    
            var regionCodeParameter = regionCode != null ?
                new ObjectParameter("RegionCode", regionCode) :
                new ObjectParameter("RegionCode", typeof(string));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(string));
    
            var isReplacementParameter = isReplacement.HasValue ?
                new ObjectParameter("IsReplacement", isReplacement) :
                new ObjectParameter("IsReplacement", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCardCharges_Result>("sp_GetCardCharges", accountCodeParameter, cardTypeIDParameter, regionCodeParameter, frequencyParameter, isReplacementParameter);
        }
    
        public virtual ObjectResult<sp_ExportData_Result> sp_ExportData(string requestType, Nullable<int> cardTypeId, string branchCode)
        {
            var requestTypeParameter = requestType != null ?
                new ObjectParameter("RequestType", requestType) :
                new ObjectParameter("RequestType", typeof(string));
    
            var cardTypeIdParameter = cardTypeId.HasValue ?
                new ObjectParameter("CardTypeId", cardTypeId) :
                new ObjectParameter("CardTypeId", typeof(int));
    
            var branchCodeParameter = branchCode != null ?
                new ObjectParameter("BranchCode", branchCode) :
                new ObjectParameter("BranchCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ExportData_Result>("sp_ExportData", requestTypeParameter, cardTypeIdParameter, branchCodeParameter);
        }
    
        public virtual ObjectResult<sp_GetCardChargesRegion_Result> sp_GetCardChargesRegion(string accountCode, Nullable<int> cardTypeID, string regionCode, string frequency)
        {
            var accountCodeParameter = accountCode != null ?
                new ObjectParameter("AccountCode", accountCode) :
                new ObjectParameter("AccountCode", typeof(string));
    
            var cardTypeIDParameter = cardTypeID.HasValue ?
                new ObjectParameter("CardTypeID", cardTypeID) :
                new ObjectParameter("CardTypeID", typeof(int));
    
            var regionCodeParameter = regionCode != null ?
                new ObjectParameter("RegionCode", regionCode) :
                new ObjectParameter("RegionCode", typeof(string));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCardChargesRegion_Result>("sp_GetCardChargesRegion", accountCodeParameter, cardTypeIDParameter, regionCodeParameter, frequencyParameter);
        }
    
        public virtual ObjectResult<sp_GetCardChargesRegion1_Result> sp_GetCardChargesRegion1(string accountCode, Nullable<int> cardTypeID, string regionCode, string frequency)
        {
            var accountCodeParameter = accountCode != null ?
                new ObjectParameter("AccountCode", accountCode) :
                new ObjectParameter("AccountCode", typeof(string));
    
            var cardTypeIDParameter = cardTypeID.HasValue ?
                new ObjectParameter("CardTypeID", cardTypeID) :
                new ObjectParameter("CardTypeID", typeof(int));
    
            var regionCodeParameter = regionCode != null ?
                new ObjectParameter("RegionCode", regionCode) :
                new ObjectParameter("RegionCode", typeof(string));
    
            var frequencyParameter = frequency != null ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCardChargesRegion1_Result>("sp_GetCardChargesRegion1", accountCodeParameter, cardTypeIDParameter, regionCodeParameter, frequencyParameter);
        }
    }
}
